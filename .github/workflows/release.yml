name: Release

on:
  # workflow_dispatch:
  #   # Inputs the workflow accepts.
  #   inputs:
  #     tag:
  #       description: 'Tag, branch or SHA sum to release'
  #       required: true
  #       default: 'v0.0.99'
  #     pre-release:
  #       description: 'Should this be a pre-release?'
  #       default: 'false'
  #       required: false
  push:
    #branch: 'release-pipeline'
    tags:
      - "v*.*.*"
 
jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest]
        #os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Set git to use LF
        if: matrix.os == 'windows-latest'
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      - uses: actions/checkout@v3

      - name: Get Rust toolchain version from rust-toolchain.toml
        id: getrustver
        run: |
          RUST_VER=$(grep channel ./rust-toolchain.toml | awk '{print $NF}' | tr -d '"') >> $GITHUB_OUTPUT

      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ steps.getrustver.RUST_VER }}

      - name: setup msys2 for windows
        if: matrix.os == 'windows-latest'
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: mingw-w64-x86_64-toolchain mingw-w64-x86_64-sqlite3 gcc make base-devel mingw-w64-x86_64-rust zip
          msystem: mingw64
          path-type: inherit

      - name: Build sqld (windows)
        if: matrix.os == 'windows-latest'
        run: |
          export CARGO_BIN="$(which cargo)"
          cargo build --release 
        shell: msys2 {0}

      - name: Zip artifact for deployment (windows)
        if: matrix.os == 'windows-latest'
        #run: zip sqld-${{ github.event.inputs.tag }}-${{ matrix.os }}.zip ./target/release/sqld
        run: zip sqld-${{ github.ref }}-${{ matrix.os }}.zip ./target/release/sqld
        shell: msys2 {0}
      
      - name: install dependencies (linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt install --yes \
            bundler \
            libpq-dev \
            libsqlite3-dev \
            nodejs \
            protobuf-compiler 

      - name: Build sqld (linux/macos)
        if: matrix.os != 'windows-latest'
        run: |
          cargo -V
          git status
          git describe --tags
          cargo build --release 

      - name: Zip artifact for deployment (linux/macos)
        if: matrix.os != 'windows-latest'
        #run: zip sqld-${{ github.event.inputs.tag }}-${{ matrix.os }}.zip ./target/release/sqld
        run: zip sqld-${{ github.ref }}-${{ matrix.os }}.zip ./target/release/sqld

      - uses: actions/upload-artifact@v3
        with:
          #name: sqld-${{ github.event.inputs.tag }}-${{ matrix.os }}
          #path: sqld-${{ github.event.inputs.tag }}-${{ matrix.os }}.zip
          name: sqld-${{ github.ref }}-${{ matrix.os }}
          path: sqld-${{ github.ref }}-${{ matrix.os }}.zip
          retention-days: 1

  release:
    name: "Release"
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3

      - name: Display fetched artifacts
        run: ls -Rha

        
      # NOTE: When providing a body and body_path at the same time, 
      # body_path will be attempted first, then falling back on body 
      # if the path can not be read from.
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          token: "${{ secrets.GH_TOKEN }}"
          body: |
            SQLd ${{ github.ref }}" 
          body_path: RELEASE_NOTES.md
          prerelease: false
          tag_name: ${{ github.ref_name }}
          generate_release_notes: true
          fail_on_unmatched_files: false
          files: |
             sqld-${{ github.ref }}-windows-latest/*
             sqld-${{ github.ref }}-macos-latest/*
             sqld-${{ github.ref }}-ubuntu-latest/*
